// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VLPlayerLib
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import AdSupport
import AmazonIVSPlayer
import CommonCrypto
import CoreMedia
import DeveloperToolsSupport
import Foundation
import GoogleCast
import GoogleInteractiveMediaAds
import MediaPlayer
import Network
import ObjectiveC
import QuartzCore
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import VLBeaconLib
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum VideoSourceType {
  case hls
  case mp4
  case fairplay
  case widevine
  public static func == (a: VLPlayerLib.VideoSourceType, b: VLPlayerLib.VideoSourceType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct VideoSource {
}
public struct VideoImageObject {
}
public struct Tags {
}
@objc @_inheritsConvenienceInitializers public class PlayerObject : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public class Subtitles {
  public init(file filePath: Foundation.URL, encoding: Swift.String.Encoding = String.Encoding.utf8)
  public init(subtitles string: Swift.String)
  public func searchSubtitles(at time: Foundation.TimeInterval) -> Swift.String?
  @objc deinit
}
extension AVFoundation.AVPlayer {
  public var subtitleLabel: UIKit.UILabel? {
    get
    set(value)
  }
  public func addSubtitles(parentView: UIKit.UIView, textColor: Swift.String?, isFullScreen: Swift.Bool) -> Self
  public func getSubTitleInstance() -> Self
  public func updateSubtitlesFont()
  public func updateSubTitleConstraints(parentView: UIKit.UIView, isFullScreen: Swift.Bool)
  public func open(file filePath: Foundation.URL, encoding: Swift.String.Encoding = String.Encoding.utf8, isPathLocal: Swift.Bool)
  public func show(subtitles string: Swift.String)
}
extension AmazonIVSPlayer.IVSPlayer {
  public var subtitleLabel: UIKit.UILabel? {
    get
    set(value)
  }
  public func addSubtitles(parentView: UIKit.UIView, textColor: Swift.String?, isFullScreen: Swift.Bool) -> Self
  public func getSubTitleInstance() -> Self
  public func updateSubtitlesFont()
  public func updateSubTitleConstraints(parentView: UIKit.UIView, isFullScreen: Swift.Bool)
  public func open(file filePath: Foundation.URL, encoding: Swift.String.Encoding = String.Encoding.utf8, isPathLocal: Swift.Bool, playerPosition: Swift.Double)
  public func show(subtitles string: Swift.String, playerPosition: Swift.Double)
  public func showSubTitlesOnPlayerProgress(playerPosition: Swift.Double)
}
@objc @_inheritsConvenienceInitializers open class VLError : ObjectiveC.NSObject {
  open var isSuccess: Swift.Bool?
  open var isPlayable: Swift.Bool?
  open var errorCode: Swift.String?
  open var errorMessage: Swift.String?
  open var vl_errorCode: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class DataParser : ObjectiveC.NSObject {
  public func parseContent(contentDictionary: Swift.Dictionary<Swift.String, Swift.AnyObject>) -> VLPlayerLib.PlayerObject
  @objc override dynamic public init()
  @objc deinit
}
public enum NetworkConnectionStatus : Swift.String {
  case poor
  case good
  case disConnected
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum NetworkBandwidthUnit : Swift.String {
  case mbps
  case kbps
  case bps
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class BeaconHelper : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public struct VLPlayerResponse : Swift.Decodable {
  public let id: Swift.String?
  public let playable: Swift.Bool?
  public let videoInfo: VLPlayerLib.VLPlayerResponse.ContentInfo?
  public let plans: [VLPlayerLib.VLPlayerResponse.PlanDetail]?
  public init(from decoder: any Swift.Decoder) throws
}
extension VLPlayerLib.VLPlayerResponse {
  public struct DFPAdsDetail : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse {
  public struct ContentInfo : Swift.Decodable {
    public let generalInfo: VLPlayerLib.VLPlayerResponse.ContentInfo.Gist?
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse {
  public struct PlanDetail : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse {
  public struct AdsDetails : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse.PlanDetail {
  public struct PlanFeatures : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse.PlanDetail {
  public struct PlanDetails : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse.PlanDetail.PlanDetails {
  public struct FeatureDetails : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse.AdsDetails {
  public struct FeatureDetails : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse.ContentInfo {
  public struct Gist : Swift.Decodable {
    public let id: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse.ContentInfo.Gist {
  public struct ImageInfo : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse.ContentInfo {
  public struct CategoryInfo : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse.ContentInfo {
  public struct ContentPricing : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse.ContentInfo {
  public struct MonetizationModel : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse.ContentInfo {
  public struct PlanMappedDetail : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse.ContentInfo {
  public struct ContentDetails : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse.ContentInfo {
  public struct LiveDetails : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse.ContentInfo.ContentDetails {
  public struct ClosedCaption : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse.ContentInfo {
  public struct PlaybackInfo : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse.ContentInfo.PlaybackInfo {
  public struct VideoAsset : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse.ContentInfo.PlaybackInfo.VideoAsset {
  public struct AssetDetail : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct PreRollAdTag : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct AdTag : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct AdTagDetail : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class MarqueeLabel : UIKit.UILabel, QuartzCore.CAAnimationDelegate {
  public enum MarqueeType {
    case left
    case leftRight
    case right
    case rightLeft
    case continuous
    case continuousReverse
    public static func == (a: VLPlayerLib.MarqueeLabel.MarqueeType, b: VLPlayerLib.MarqueeLabel.MarqueeType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) open var type: VLPlayerLib.MarqueeLabel.MarqueeType {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var scrollSequence: [any VLPlayerLib.MarqueeStep]?
  @_Concurrency.MainActor(unsafe) open var animationCurve: UIKit.UIView.AnimationCurve
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var labelize: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var holdScrolling: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var tapToScroll: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var isPaused: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) open var awayFromHome: Swift.Bool {
    get
  }
  public enum SpeedLimit {
    case rate(CoreFoundation.CGFloat)
    case duration(CoreFoundation.CGFloat)
  }
  @_Concurrency.MainActor(unsafe) open var speed: VLPlayerLib.MarqueeLabel.SpeedLimit {
    get
    set
  }
  @objc @available(*, deprecated, message: "Use speed property instead")
  @IBInspectable @_Concurrency.MainActor(unsafe) open var scrollDuration: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, message: "Use speed property instead")
  @IBInspectable @_Concurrency.MainActor(unsafe) open var scrollRate: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var leadingBuffer: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var trailingBuffer: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var fadeLength: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var animationDelay: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var animationDuration: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) open class func restartLabelsOfController(_ controller: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) open class func controllerViewWillAppear(_ controller: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) open class func controllerViewDidAppear(_ controller: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) open class func controllerLabelsLabelize(_ controller: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) open class func controllerLabelsAnimate(_ controller: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, rate: CoreFoundation.CGFloat, fadeLength fade: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, duration: CoreFoundation.CGFloat, fadeLength fade: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc convenience override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @available(iOS 8.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willMove(toWindow newWindow: UIKit.UIWindow?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToWindow()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func sizeThatFits(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) open func labelShouldScroll() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func animationDidStop(_ anim: QuartzCore.CAAnimation, finished flag: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ layer: QuartzCore.CALayer, in ctx: CoreGraphics.CGContext)
  @objc @_Concurrency.MainActor(unsafe) public func restartForViewController(_ notification: Foundation.Notification)
  @objc @_Concurrency.MainActor(unsafe) public func labelizeForController(_ notification: Foundation.Notification)
  @objc @_Concurrency.MainActor(unsafe) public func animateForController(_ notification: Foundation.Notification)
  @_Concurrency.MainActor(unsafe) public func triggerScrollStart()
  @objc @_Concurrency.MainActor(unsafe) public func restartLabel()
  @available(*, deprecated, message: "Use the shutdownLabel function instead")
  @_Concurrency.MainActor(unsafe) public func resetLabel()
  @objc @_Concurrency.MainActor(unsafe) public func shutdownLabel()
  @_Concurrency.MainActor(unsafe) public func pauseLabel()
  @_Concurrency.MainActor(unsafe) public func unpauseLabel()
  @objc @_Concurrency.MainActor(unsafe) public func labelWasTapped(_ recognizer: UIKit.UIGestureRecognizer)
  @_Concurrency.MainActor(unsafe) open func labelWillBeginScroll()
  @_Concurrency.MainActor(unsafe) open func labelReturnedToHome(_ finished: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func forBaselineLayout() -> UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var forLastBaselineLayout: UIKit.UIView {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var text: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var attributedText: Foundation.NSAttributedString? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var font: UIKit.UIFont! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var textColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var shadowColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var shadowOffset: CoreFoundation.CGSize {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var highlightedTextColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var numberOfLines: Swift.Int {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var adjustsFontSizeToFitWidth: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var minimumScaleFactor: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var baselineAdjustment: UIKit.UIBaselineAdjustment {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tintColorDidChange()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var contentMode: UIKit.UIView.ContentMode {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isAccessibilityElement: Swift.Bool {
    @objc get
    @objc set
  }
  @objc deinit
}
public protocol MarqueeStep {
  var timeStep: CoreFoundation.CGFloat { get }
  var timingFunction: UIKit.UIView.AnimationCurve { get }
  var edgeFades: VLPlayerLib.EdgeFade { get }
}
public struct ScrollStep : VLPlayerLib.MarqueeStep {
  public enum Position {
    case home
    case away
    case partial(CoreFoundation.CGFloat)
  }
  public let timeStep: CoreFoundation.CGFloat
  public let timingFunction: UIKit.UIView.AnimationCurve
  public let position: VLPlayerLib.ScrollStep.Position
  public let edgeFades: VLPlayerLib.EdgeFade
  public init(timeStep: CoreFoundation.CGFloat, timingFunction: UIKit.UIView.AnimationCurve = .linear, position: VLPlayerLib.ScrollStep.Position, edgeFades: VLPlayerLib.EdgeFade)
}
public struct FadeStep : VLPlayerLib.MarqueeStep {
  public let timeStep: CoreFoundation.CGFloat
  public let timingFunction: UIKit.UIView.AnimationCurve
  public let edgeFades: VLPlayerLib.EdgeFade
  public init(timeStep: CoreFoundation.CGFloat, timingFunction: UIKit.UIView.AnimationCurve = .linear, edgeFades: VLPlayerLib.EdgeFade)
}
public struct EdgeFade : Swift.OptionSet {
  public let rawValue: Swift.Int
  public static let leading: VLPlayerLib.EdgeFade
  public static let trailing: VLPlayerLib.EdgeFade
  public init(rawValue: Swift.Int)
  public typealias ArrayLiteralElement = VLPlayerLib.EdgeFade
  public typealias Element = VLPlayerLib.EdgeFade
  public typealias RawValue = Swift.Int
}
extension VLPlayerLib.VLPlayer {
  @objc dynamic open func play()
  @objc dynamic open func pause()
  @objc dynamic open func dispose()
  @objc dynamic open func destroy()
  @objc dynamic open func deinitialisePlayer()
  @objc dynamic open func setPlayerFitToFullScreen()
  @objc dynamic open func setPlayerFitToSmallScreen(frame: CoreFoundation.CGRect)
  @objc dynamic open func goFullScreen()
  @objc dynamic open func removeFullScreen()
  @objc dynamic open func seekTo(seconds: Swift.Double)
  @objc dynamic open func seekToLivePosition()
  @objc dynamic open func seekDVRToLivePosition()
  @objc dynamic open func startTime(seconds: Swift.Double)
  public func getCurrentTime() -> Swift.Double?
  @objc dynamic open func getSource() -> Swift.Dictionary<Swift.String, Swift.String>?
  @objc dynamic open func setIconColor(color: Swift.String)
  @objc dynamic open func setTextColor(color: Swift.String)
  @objc dynamic open func setProgressBarBGColor(color: Swift.String)
  @objc dynamic open func setProgressBarColor(color: Swift.String)
  @objc dynamic open func shouldAutoplay(autoplay: Swift.Bool)
  @objc dynamic open func checkFullscreenState() -> Swift.Bool
  @objc dynamic open func getVideoPlayerView() -> UIKit.UIView?
  @objc dynamic open func setNextVideo(videoId: Swift.String, adTag: Swift.String?)
  @objc dynamic open func playNextVideo(videoId: Swift.String?, vlToken: Swift.String?, adTag: Swift.String?, isSuccess: @escaping ((_ isSuccess: Swift.Bool) -> Swift.Void))
  public func isAutoPlay() -> Swift.Bool?
  @objc dynamic open func shouldPlayMuted(isMuted: Swift.Bool)
  public func isMuted() -> Swift.Bool?
  @objc dynamic open func setVolumeLevel(volumeLevel: Swift.Int)
  public func getVolumeLevel() -> Swift.Int?
  @objc dynamic open func isPictureInPictureSelected() -> Swift.Bool
  @objc dynamic open func setupPictureInPicture()
  @objc dynamic open func pictureInPictureClicked(isPipSelected: Swift.Bool)
  public func setVideoPlayerGravity(videoPlayerGravity: VLPlayerLib.VLPlayer.VideoPlayerGravity)
  public func toggleClosedCaption(enable: Swift.Bool)
  public func isClosedCaptionEnabled() -> Swift.Bool
  public func startPictureInPictureAutomaticallyFromInline(enablePictureInPictureInline: Swift.Bool)
  public func requireLinearPlaybackInPictureInPicture(isRequired: Swift.Bool)
  public func getChromeCastConnectedStatus() -> Swift.Bool
  public func castButtonTapped(sender: UIKit.UIButton)
  public func isLowLatencyPlayer() -> Swift.Bool
  @objc dynamic open func setCaptionsVisiblity(captionsVisible: Swift.Bool)
  public func getState() -> VLPlayerLib.VLPlayer.VLPlayerState
  @objc dynamic open func getPlayerVersion() -> Swift.String?
  public func getCurrentVideoTimeLeft() -> Swift.Double?
  public func getCurrentVideoDuration() -> Swift.Double?
  @objc dynamic open func updateVideoPlayerFrame(frame: CoreFoundation.CGRect)
  public func getStartOverTime() -> Swift.Double?
  public func isDVREnabled() -> Swift.Bool?
  public func isLiveVideo() -> Swift.Bool
  public func getAllVideoPlaybackQualityList() -> [Swift.String]?
  public func getCurrentPlaybackQuality() -> Swift.String?
  public func setPlaybackQuality(playbackQuality: Swift.String)
  public func getAllClosedCaptionList() -> [Swift.String]?
  public func getAllContentAudioLanguageList() -> [Swift.String]?
  public func setPlaybackRate(playbackSpeed: Swift.Float)
  public func getPlaybackRate() -> Swift.Float
  public func getCurrentAudioSelected() -> Swift.Int
  public func setAudioSelected(selectedAudio: Swift.String)
  public func setClosedCaption(selectedKey: Swift.String, selectedIndex: Swift.Int)
  public func setClosedCaption(selectedKey: Swift.String, selectedIndex: Swift.Int, isSrtSubtitle: Swift.Bool)
  public func showOrHideAlwaysPlaybackControl(isShowing: Swift.Bool)
}
extension VLPlayerLib.VLPlayer {
  @objc dynamic open func isPlaying() -> Swift.Bool
  @objc dynamic open func shouldPlayVideo(initially: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers open class VLPlayer : ObjectiveC.NSObject {
  weak open var videoPlayerDatasource: (any VLPlayerLib.VideoPlayerDataSource)?
  @objc weak open var videoPlayerDelegate: (any VLPlayerLib.videoPlaybackDelegate)?
  @objc weak open var castDelegate: (any VLPlayerLib.ChromeCastPlaybackDelegate)?
  weak open var clientSideAdTrackingDelegate: (any VLPlayerLib.ClientSideAdTrackingDelegate)? {
    get
    set
  }
  public var debugLogs: Swift.Bool? {
    get
    set
  }
  open var enablePlayerBitrateLogs: Swift.Bool?
  public enum PlayerDisplayType {
    case single
    case multiple
    public static func == (a: VLPlayerLib.VLPlayer.PlayerDisplayType, b: VLPlayerLib.VLPlayer.PlayerDisplayType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ResolutionType : Swift.Float {
    case autoResolution
    case maxResolution
    case averageAboveResolution
    case averageBelowResolution
    case minResolution
    public init?(rawValue: Swift.Float)
    public typealias RawValue = Swift.Float
    public var rawValue: Swift.Float {
      get
    }
  }
  @objc override dynamic public init()
  public func setEntitlement(data: VLPlayerLib.EntitlementData?, screenResolution: VLPlayerLib.VLPlayer.ResolutionType? = nil)
  public func refreshEntitlement(data: VLPlayerLib.EntitlementData?, isSuccess: @escaping ((_ isSuccess: Swift.Bool, _ playerView: UIKit.UIView?, _ contentResponse: Swift.Dictionary<Swift.String, Swift.AnyObject>?) -> Swift.Void))
  open func setSource(vlToken: Swift.String, vlAPIEndPoint: Swift.String? = nil, vlBeaconEndPoint: Swift.String? = nil, videoID: Swift.String, vlPlayerTag: Swift.String, customControlsView: UIKit.UIView?, adUrl: Swift.String?, playerProgressInterval: Swift.Int? = nil, images: (leftImage: UIKit.UIImage, rightImage: UIKit.UIImage?)? = nil, playerFeaturesSupported: VLPlayerLib.VLPlayer.VLPlayerFeatureSupported!, nextVideoList: [Swift.String] = [], householdID: Swift.String? = nil, tveProvider: Swift.String?, location: (lat: Swift.String, long: Swift.String)?, isSuccess: @escaping ((_ isSuccess: Swift.Bool, _ playerView: UIKit.UIView?, _ contentResponse: Swift.Dictionary<Swift.String, Swift.AnyObject>?) -> Swift.Void))
  @objc deinit
}
extension VLPlayerLib.VLPlayer {
  public struct VLPlayerFeatureSupported {
    public init(fullScreenOnly: Swift.Bool, isCustomLoaderAdded: Swift.Bool = false, shouldStartPictureInPictureInline: Swift.Bool = false, autoPlayEnabled: Swift.Bool = true, loopVideoPlayback: Swift.Bool = false, hideVideoControls: Swift.Bool = false, mutePlayback: Swift.Bool = false, customPlayerControlsColor: VLPlayerLib.PlayerControlsColor?, clientSideAdTrackingDetails: VLPlayerLib.VLPlayer.VLClientSideAdTrackingDetails? = nil, showPlayerControlAlways: Swift.Bool = false, supportsChromeCast: Swift.Bool = false, chromecastCustomReceiver: Swift.String?, playerResponseRequired: Swift.Bool = false, preGameStartTime: Swift.Double?, appMacrosList: [Swift.String : Swift.String]? = [:], vlBeacon: VLBeaconLib.VLBeacon?)
  }
  public struct VLClientSideAdTrackingDetails {
    public init(isClientSideAdTrackingEnabled: Swift.Bool, isWTAEnabled: Swift.Bool)
  }
}
extension VLPlayerLib.VLPlayer {
  public enum VideoPlayerGravity : Swift.String {
    case resizeAspect
    case resizeAspectFill
    case resize
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum VLPlayerState : Swift.String {
    case paused
    case playing
    case playingAndCasting
    case buffering
    case complete
    case error
    case advertisement
    case stalled
    case stopped
    case none
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum AdsEventType : Swift.String {
    case impression
    case start
    case firstQuartile
    case midPoint
    case thirdQuartile
    case complete
    case mute
    case exitFullscreen
    case fullscreen
    case unmute
    case resume
    case closeLinear
    case error
    case pause
    case acceptInvitationLinear
    case rewind
    case creativeView
    case stop
    case clickThrough
    case clickTracking
    case none
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public struct PlayerControlsColor {
  public init(iconColor: Swift.String? = nil, textColor: Swift.String? = nil, progressBarBGColor: Swift.String? = nil, progressBarColor: Swift.String? = nil)
}
public struct EntitlementData {
  public let playerObject: VLPlayerLib.PlayerObject?
  public let isSuccess: Swift.Bool?
  public let error: VLPlayerLib.VLError?
  public let playerResponse: VLPlayerLib.VLPlayerResponse?
  public let contentResponse: Swift.Dictionary<Swift.String, Swift.AnyObject>?
  public init(playerObject: VLPlayerLib.PlayerObject?, isSuccess: Swift.Bool?, error: VLPlayerLib.VLError?, playerResponse: VLPlayerLib.VLPlayerResponse?, contentResponse: Swift.Dictionary<Swift.String, Swift.AnyObject>?)
}
public struct VideoPlan : Swift.Codable {
  public let monetizationModel: Swift.String
  public var featureSetting: VLPlayerLib.VideoPlanFeatureSetting?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VideoContentResponse : Swift.Codable {
  public var plans: [VLPlayerLib.VideoPlan]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VideoPlanFeatureSetting : Swift.Codable {
  public var isLoginRequired: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol VideoPlayerDataSource : AnyObject {
  func isUserLoggedIn() -> Swift.Bool
}
@objc public protocol videoPlaybackDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func customPlayerState(isPlaying: Swift.Bool)
  @objc optional func customPlayerControls(isHidden: Swift.Bool)
  @objc optional func videoStarted(timestamp: Swift.Double, playerTag: Swift.String)
  @objc optional func videoFinished(playerTag: Swift.String)
  @objc optional func videoPause(timestamp: Swift.Double, playerTag: Swift.String)
  @objc optional func videoResume(timestamp: Swift.Double, playerTag: Swift.String)
  @objc optional func videoPlayerUpdateByProgressInterveral(currentTime: Swift.Double, totalTime: Swift.Double, playerTag: Swift.String)
  @objc optional func videoPlayerProgressByEverySecond(currentTime: Swift.Double, totalTime: Swift.Double, playerTag: Swift.String)
  @objc optional func videoPlaybackError(currentTime: Swift.Double, errorMessage: Swift.String, errorCode: Swift.String, playerTag: Swift.String)
  @objc optional func adStarted(currentTime: Swift.Double, adTag: Swift.String?, playerTag: Swift.String)
  @objc optional func adResumed(currentTime: Swift.Double, adTag: Swift.String?, playerTag: Swift.String)
  @objc optional func adStopped(currentTime: Swift.Double, adTag: Swift.String?, playerTag: Swift.String)
  @objc optional func adPaused(currentTime: Swift.Double, adTag: Swift.String?, playerTag: Swift.String)
  @objc optional func adFinished(currentTime: Swift.Double, adTag: Swift.String?, playerTag: Swift.String)
  @objc optional func adError(currentTime: Swift.Double, adTag: Swift.String?, errorMessage: Swift.String?, playerTag: Swift.String)
  @objc optional func onFullScreenChange(currentTime: Swift.Double, isFullScreen: Swift.Bool, playerTag: Swift.String)
  @objc optional func onBackButtonTapped()
  @objc optional func onSeek(currentTime: Swift.Double, playerTag: Swift.String)
  @objc optional func onBuffer(currentTime: Swift.Double, playerTag: Swift.String)
  @objc optional func videoFetchError(error: VLPlayerLib.VLError?, playerTag: Swift.String?, contentResponse: Swift.Dictionary<Swift.String, Swift.AnyObject>?)
  @objc optional func pictureInPictureSetupCompleted(isPIPSelected: Swift.Bool)
  @objc optional func pictureInPictureWillStart()
  @objc optional func pictureInPictureDidStart()
  @objc optional func pictureInPictureRestoreFullPlayer()
  @objc optional func pictureInPictureWillStop()
  @objc optional func pictureInPictureDidStop()
  @objc optional func pictureInPictureDidFailedToStart(error: VLPlayerLib.VLError, playerTag: Swift.String)
  @objc optional func onLoadingChanged(isLoading: Swift.Bool)
  @objc optional func lowLatencyPlayerLoaded()
  @objc optional func isSubtitlesEmbeddedInUrlChanged(isEmbedded: Swift.Bool)
  @objc optional func playerBitrateDebugLogs(logString: Swift.String)
  @objc optional func autoPlayUIInitiated()
  @objc optional func autoPlayUIDimissed(isPlayingNextContent: Swift.Bool)
}
@objc public protocol ChromeCastPlaybackDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func chromeCastConnectionStatusUpdate(isConnected: Swift.Bool, castContextSessionInstance: GoogleCast.GCKCastContext?)
  @objc optional func startAnimatingCastIcon()
}
public protocol ClientSideAdTrackingDelegate : AnyObject {
  func additionalTrackingDetailsForClientSideAdTracking() -> [Swift.String : Any]?
  func clientSideAdTrackingEvents(trackingEventType: VLPlayerLib.VLPlayer.AdsEventType, eventTrackingProperties: [Swift.String : Any])
  func initalisationForExternalAdTrackingSdk(playerView: UIKit.UIView, playerSize: CoreFoundation.CGSize, completion: (() -> Swift.Void))
}
@_hasMissingDesignatedInitializers open class NetworkReachabilityManager {
  public enum NetworkReachabilityStatus {
    case unknown
    case notReachable
    case reachable(VLPlayerLib.NetworkReachabilityManager.ConnectionType)
  }
  public enum ConnectionType {
    case ethernetOrWiFi
    case wwan
    public static func == (a: VLPlayerLib.NetworkReachabilityManager.ConnectionType, b: VLPlayerLib.NetworkReachabilityManager.ConnectionType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public typealias Listener = (VLPlayerLib.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Void
  open var isReachable: Swift.Bool {
    get
  }
  open var isReachableOnWWAN: Swift.Bool {
    get
  }
  open var isReachableOnEthernetOrWiFi: Swift.Bool {
    get
  }
  open var networkReachabilityStatus: VLPlayerLib.NetworkReachabilityManager.NetworkReachabilityStatus {
    get
  }
  open var listenerQueue: Dispatch.DispatchQueue
  open var listener: VLPlayerLib.NetworkReachabilityManager.Listener?
  open var flags: SystemConfiguration.SCNetworkReachabilityFlags? {
    get
  }
  open var previousFlags: SystemConfiguration.SCNetworkReachabilityFlags
  convenience public init?(host: Swift.String)
  convenience public init?()
  @objc deinit
  @discardableResult
  open func startListening() -> Swift.Bool
  open func stopListening()
}
extension VLPlayerLib.NetworkReachabilityManager.NetworkReachabilityStatus : Swift.Equatable {
}
public func == (lhs: VLPlayerLib.NetworkReachabilityManager.NetworkReachabilityStatus, rhs: VLPlayerLib.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Bool
public struct ValidatedPlayerResponse {
  public let success: Swift.Bool
  public let error: VLPlayerLib.VLError?
  public let contentResponse: Swift.Dictionary<Swift.String, Swift.AnyObject>?
}
public struct PlayerResponseValidation {
  public init()
  public func validateResponse(fetchedSuccessfully isSuccess: Swift.Bool, contentResponse: Swift.Dictionary<Swift.String, Swift.AnyObject>?, isUserLoggedIn: Swift.Bool?, creationHandler: (() -> Swift.Void)? = nil) -> VLPlayerLib.ValidatedPlayerResponse
}
extension VLPlayerLib.VideoSourceType : Swift.Equatable {}
extension VLPlayerLib.VideoSourceType : Swift.Hashable {}
extension VLPlayerLib.NetworkConnectionStatus : Swift.Equatable {}
extension VLPlayerLib.NetworkConnectionStatus : Swift.Hashable {}
extension VLPlayerLib.NetworkConnectionStatus : Swift.RawRepresentable {}
extension VLPlayerLib.NetworkBandwidthUnit : Swift.Equatable {}
extension VLPlayerLib.NetworkBandwidthUnit : Swift.Hashable {}
extension VLPlayerLib.NetworkBandwidthUnit : Swift.RawRepresentable {}
extension VLPlayerLib.MarqueeLabel.MarqueeType : Swift.Equatable {}
extension VLPlayerLib.MarqueeLabel.MarqueeType : Swift.Hashable {}
extension VLPlayerLib.VLPlayer.PlayerDisplayType : Swift.Equatable {}
extension VLPlayerLib.VLPlayer.PlayerDisplayType : Swift.Hashable {}
extension VLPlayerLib.VLPlayer.ResolutionType : Swift.Equatable {}
extension VLPlayerLib.VLPlayer.ResolutionType : Swift.Hashable {}
extension VLPlayerLib.VLPlayer.ResolutionType : Swift.RawRepresentable {}
extension VLPlayerLib.VLPlayer.VideoPlayerGravity : Swift.Equatable {}
extension VLPlayerLib.VLPlayer.VideoPlayerGravity : Swift.Hashable {}
extension VLPlayerLib.VLPlayer.VideoPlayerGravity : Swift.RawRepresentable {}
extension VLPlayerLib.VLPlayer.VLPlayerState : Swift.Equatable {}
extension VLPlayerLib.VLPlayer.VLPlayerState : Swift.Hashable {}
extension VLPlayerLib.VLPlayer.VLPlayerState : Swift.RawRepresentable {}
extension VLPlayerLib.VLPlayer.AdsEventType : Swift.Equatable {}
extension VLPlayerLib.VLPlayer.AdsEventType : Swift.Hashable {}
extension VLPlayerLib.VLPlayer.AdsEventType : Swift.RawRepresentable {}
extension VLPlayerLib.NetworkReachabilityManager.ConnectionType : Swift.Equatable {}
extension VLPlayerLib.NetworkReachabilityManager.ConnectionType : Swift.Hashable {}
