// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-tvos13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name VLPlayerLib
import AVFoundation
import AVKit
import AdSupport
import CommonCrypto
import CoreMedia
import DeveloperToolsSupport
import Foundation
import GoogleInteractiveMediaAds
import MediaPlayer
import ObjectiveC
import Swift
import SwiftUI
import UIKit
import VLBeaconLib
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct ValidatedPlayerResponse {
  public let success: Swift.Bool
  public let error: VLPlayerLib.VLError?
  public let contentResponse: Swift.Dictionary<Swift.String, Swift.AnyObject>?
}
public struct PlayerResponseValidation {
  public init()
  public func validateResponse(fetchedSuccessfully isSuccess: Swift.Bool, contentResponse: Swift.Dictionary<Swift.String, Swift.AnyObject>?, isUserLoggedIn: Swift.Bool?, creationHandler: (() -> Swift.Void)? = nil) -> VLPlayerLib.ValidatedPlayerResponse
}
public class Subtitles {
  public init(file filePath: Foundation.URL, encoding: Swift.String.Encoding = String.Encoding.utf8)
  public init(subtitles string: Swift.String)
  public func searchSubtitles(at time: Foundation.TimeInterval) -> Swift.String?
  @objc deinit
}
extension AVFoundation.AVPlayer {
  public var subtitleLabel: UIKit.UILabel? {
    get
    set(value)
  }
  public func addSubtitles(parentView: UIKit.UIView, textColor: Swift.String?, isFullScreen: Swift.Bool) -> Self
  public func getSubTitleInstance() -> Self
  public func updateSubtitlesFont()
  public func updateSubTitleConstraints(parentView: UIKit.UIView, isFullScreen: Swift.Bool)
  public func open(file filePath: Foundation.URL, encoding: Swift.String.Encoding = String.Encoding.utf8, isPathLocal: Swift.Bool)
  public func show(subtitles string: Swift.String)
}
@objc @_inheritsConvenienceInitializers public class BeaconHelper : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public struct VideoPlan : Swift.Codable {
  public let monetizationModel: Swift.String
  public var featureSetting: VLPlayerLib.VideoPlanFeatureSetting?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VideoContentResponse : Swift.Codable {
  public var plans: [VLPlayerLib.VideoPlan]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VideoPlanFeatureSetting : Swift.Codable {
  public var isLoginRequired: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers open class VLError : ObjectiveC.NSObject {
  open var isSuccess: Swift.Bool?
  open var isPlayable: Swift.Bool?
  open var errorCode: Swift.String?
  open var errorMessage: Swift.String?
  open var vl_errorCode: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
public enum NetworkConnectionStatus : Swift.String {
  case poor
  case good
  case disConnected
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum NetworkBandwidthUnit : Swift.String {
  case mbps
  case kbps
  case bps
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol VideoPlayerDataSource : AnyObject {
  func isUserLoggedIn() -> Swift.Bool
}
@objc public protocol videoPlaybackDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func customPlayerState(isPlaying: Swift.Bool)
  @objc optional func customPlayerControls(isHidden: Swift.Bool)
  @objc optional func playerRateChanged(rate: Swift.Float, playerTag: Swift.String?)
  @objc optional func videoStarted(timestamp: Swift.Double, playerTag: Swift.String)
  @objc optional func videoFinished(playerTag: Swift.String)
  @objc optional func videoPause(timestamp: Swift.Double, playerTag: Swift.String)
  @objc optional func videoResume(timestamp: Swift.Double, playerTag: Swift.String)
  @objc optional func videoPlayerUpdateByProgressInterveral(currentTime: Swift.Double, totalTime: Swift.Double, playerTag: Swift.String)
  @objc optional func videoPlayerProgressByEverySecond(currentTime: Swift.Double, totalTime: Swift.Double, playerTag: Swift.String)
  @objc optional func videoPlaybackError(currentTime: Swift.Double, errorMessage: Swift.String, errorCode: Swift.String, playerTag: Swift.String)
  @objc optional func adStarted(currentTime: Swift.Double, adTag: Swift.String?, playerTag: Swift.String)
  @objc optional func adResumed(currentTime: Swift.Double, adTag: Swift.String?, playerTag: Swift.String)
  @objc optional func adStopped(currentTime: Swift.Double, adTag: Swift.String?, playerTag: Swift.String)
  @objc optional func adPaused(currentTime: Swift.Double, adTag: Swift.String?, playerTag: Swift.String)
  @objc optional func adFinished(currentTime: Swift.Double, adTag: Swift.String?, playerTag: Swift.String)
  @objc optional func adError(currentTime: Swift.Double, adTag: Swift.String?, errorMessage: Swift.String?, playerTag: Swift.String)
  @objc optional func onFullScreenChange(currentTime: Swift.Double, isFullScreen: Swift.Bool, playerTag: Swift.String)
  @objc optional func onBackButtonTapped()
  @objc optional func onSeek(currentTime: Swift.Double, playerTag: Swift.String)
  @objc optional func onBuffer(currentTime: Swift.Double, playerTag: Swift.String)
  @objc optional func videoFetchError(error: VLPlayerLib.VLError?, playerTag: Swift.String?, contentResponse: Swift.Dictionary<Swift.String, Swift.AnyObject>?)
  @objc optional func pictureInPictureSetupCompleted(isPIPSelected: Swift.Bool)
  @objc optional func pictureInPictureWillStart()
  @objc optional func pictureInPictureDidStart()
  @objc optional func pictureInPictureRestoreFullPlayer()
  @objc optional func pictureInPictureWillStop()
  @objc optional func pictureInPictureDidStop()
  @objc optional func pictureInPictureDidFailedToStart(error: VLPlayerLib.VLError, playerTag: Swift.String)
  @objc optional func onLoadingChanged(isLoading: Swift.Bool)
  @objc optional func lowLatencyPlayerLoaded()
  @objc optional func bitMovinPlayerLoaded()
  @objc optional func isSubtitlesEmbeddedInUrlChanged(isEmbedded: Swift.Bool)
  @objc optional func playerBitrateDebugLogs(logString: Swift.String)
  @objc optional func autoPlayUIInitiated()
  @objc optional func autoPlayUIDimissed(isPlayingNextContent: Swift.Bool)
}
public protocol ClientSideAdTrackingDelegate : AnyObject {
  func additionalTrackingDetailsForClientSideAdTracking() -> [Swift.String : Any]?
  func clientSideAdTrackingEvents(trackingEventType: VLPlayerLib.VLPlayer.AdsEventType, eventTrackingProperties: [Swift.String : Any])
  func initalisationForExternalAdTrackingSdk(playerView: UIKit.UIView, playerSize: CoreFoundation.CGSize, completion: (() -> Swift.Void))
}
public enum VideoSourceType {
  case hls
  case mp4
  case fairplay
  case widevine
  public static func == (a: VLPlayerLib.VideoSourceType, b: VLPlayerLib.VideoSourceType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct VideoSource {
  public var sourceUrl: Swift.String
}
public struct AudioAssets {
  public var hls: Swift.String?
}
public struct VideoImageObject {
}
public struct Tags {
}
@objc @_inheritsConvenienceInitializers public class PlayerObject : ObjectiveC.NSObject {
  public var videoSources: Swift.Array<VLPlayerLib.VideoSource>?
  @objc override dynamic public init()
  @objc deinit
}
extension VLPlayerLib.VLPlayer {
  @objc dynamic open func play()
  @objc dynamic open func pause()
  @objc dynamic open func dispose()
  @objc dynamic open func destroy()
  @objc dynamic open func deinitialisePlayer()
  @objc dynamic open func setPlayerFitToFullScreen()
  @objc dynamic open func setPlayerFitToSmallScreen(frame: CoreFoundation.CGRect)
  @objc dynamic open func goFullScreen()
  @objc dynamic open func removeFullScreen()
  @objc dynamic open func seekTo(seconds: Swift.Double)
  @objc dynamic open func seekToLivePosition()
  @objc dynamic open func setEndTimeDuration(from duration: Swift.Double)
  @objc dynamic open func seekDVRToLivePosition()
  @objc dynamic open func startTime(seconds: Swift.Double)
  public func getCurrentTime() -> Swift.Double?
  @objc dynamic open func getSource() -> Swift.Dictionary<Swift.String, Swift.String>?
  @objc dynamic open func setIconColor(color: Swift.String)
  @objc dynamic open func setTextColor(color: Swift.String)
  @objc dynamic open func setProgressBarBGColor(color: Swift.String)
  @objc dynamic open func setProgressBarColor(color: Swift.String)
  @objc dynamic open func shouldAutoplay(autoplay: Swift.Bool)
  @objc dynamic open func checkFullscreenState() -> Swift.Bool
  @objc dynamic open func getVideoPlayerView() -> UIKit.UIView?
  @objc dynamic open func setNextVideo(videoId: Swift.String, adTag: Swift.String?)
  @objc dynamic open func playNextVideo(videoId: Swift.String?, vlToken: Swift.String?, adTag: Swift.String?, isSuccess: @escaping ((_ isSuccess: Swift.Bool) -> Swift.Void))
  public func isAutoPlay() -> Swift.Bool?
  @objc dynamic open func shouldPlayMuted(isMuted: Swift.Bool)
  public func isMuted() -> Swift.Bool?
  public func getState() -> VLPlayerLib.VLPlayer.VLPlayerState
  @objc dynamic open func getPlayerVersion() -> Swift.String?
  public func getCurrentVideoTimeLeft() -> Swift.Double?
  public func getCurrentVideoDuration() -> Swift.Double?
  @objc dynamic open func updateVideoPlayerFrame(frame: CoreFoundation.CGRect)
  public func getStartOverTime() -> Swift.Double?
  public func isDVREnabled() -> Swift.Bool?
  public func isLiveVideo() -> Swift.Bool
  public func getAllVideoPlaybackQualityList() -> [Swift.String]?
  public func getCurrentPlaybackQuality() -> Swift.String?
  public func setPlaybackQuality(playbackQuality: Swift.String)
  public func getAllClosedCaptionList() -> [Swift.String]?
  public func getAllContentAudioLanguageList() -> [Swift.String]?
  public func setPlaybackRate(playbackSpeed: Swift.Float)
  public func getPlaybackRate() -> Swift.Float
  public func getCurrentAudioSelected() -> Swift.Int
  public func setAudioSelected(selectedAudio: Swift.String)
  public func setClosedCaption(selectedKey: Swift.String, selectedIndex: Swift.Int)
  public func setClosedCaption(selectedKey: Swift.String, selectedIndex: Swift.Int, isSrtSubtitle: Swift.Bool)
}
extension VLPlayerLib.VLPlayer {
  @objc dynamic open func isPlaying() -> Swift.Bool
  @objc dynamic open func seekBarInUse()
  public func setPlayerControls(isHidden: Swift.Bool)
  @objc dynamic open func shouldPlayVideo(initially: Swift.Bool)
}
public struct VLPlayerResponse : Swift.Decodable {
  public let id: Swift.String?
  public let playable: Swift.Bool?
  public let errorMessage: Swift.String?
  public let videoInfo: VLPlayerLib.VLPlayerResponse.ContentInfo?
  public let plans: [VLPlayerLib.VLPlayerResponse.PlanDetail]?
  public init(from decoder: any Swift.Decoder) throws
}
extension VLPlayerLib.VLPlayerResponse {
  public struct DFPAdsDetail : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse {
  public struct ContentInfo : Swift.Decodable {
    public let generalInfo: VLPlayerLib.VLPlayerResponse.ContentInfo.Gist?
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse {
  public struct PlanDetail : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse {
  public struct AdsDetails : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse.PlanDetail {
  public struct PlanFeatures : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse.PlanDetail {
  public struct PlanDetails : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse.PlanDetail.PlanDetails {
  public struct FeatureDetails : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse.AdsDetails {
  public struct FeatureDetails : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse.ContentInfo {
  public struct Gist : Swift.Decodable {
    public let id: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse.ContentInfo.Gist {
  public struct ImageInfo : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse.ContentInfo {
  public struct CategoryInfo : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse.ContentInfo {
  public struct ContentPricing : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse.ContentInfo {
  public struct MonetizationModel : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse.ContentInfo {
  public struct PlanMappedDetail : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse.ContentInfo {
  public struct ContentDetails : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse.ContentInfo {
  public struct LiveDetails : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse.ContentInfo.ContentDetails {
  public struct ClosedCaption : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse.ContentInfo {
  public struct PlaybackInfo : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse.ContentInfo.PlaybackInfo {
  public struct VideoAsset : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VLPlayerLib.VLPlayerResponse.ContentInfo.PlaybackInfo.VideoAsset {
  public struct AssetDetail : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct PreRollAdTag : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct AdTag : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct AdTagDetail : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class DataParser : ObjectiveC.NSObject {
  public func parseContent(contentDictionary: Swift.Dictionary<Swift.String, Swift.AnyObject>) -> VLPlayerLib.PlayerObject
  @objc override dynamic public init()
  @objc deinit
}
public struct VLEPGProgramDetails {
  public init(id: Swift.String, channelId: Swift.String, programId: Swift.String, programTitle: Swift.String, subType: Swift.String)
}
@objc @_inheritsConvenienceInitializers open class VLPlayer : ObjectiveC.NSObject {
  weak open var videoPlayerDatasource: (any VLPlayerLib.VideoPlayerDataSource)?
  @objc weak open var videoPlayerDelegate: (any VLPlayerLib.videoPlaybackDelegate)?
  weak open var clientSideAdTrackingDelegate: (any VLPlayerLib.ClientSideAdTrackingDelegate)? {
    get
    set
  }
  public var debugLogs: Swift.Bool? {
    get
    set
  }
  public var audioAsset: VLPlayerLib.AudioAssets? {
    get
  }
  open var enablePlayerBitrateLogs: Swift.Bool?
  public enum PlayerDisplayType : Swift.Equatable {
    case single
    case multiple
    case leaderboard(type: VLPlayerLib.VLPlayer.LeaderboardPlayerControls)
    public static func == (a: VLPlayerLib.VLPlayer.PlayerDisplayType, b: VLPlayerLib.VLPlayer.PlayerDisplayType) -> Swift.Bool
  }
  public enum LeaderboardPlayerControls {
    case tutorial
    case fullScreen
    case smallScreen
    public static func setUrl(_ urlString: Swift.String)
    public static func getUrl() -> Swift.String?
    public static func == (a: VLPlayerLib.VLPlayer.LeaderboardPlayerControls, b: VLPlayerLib.VLPlayer.LeaderboardPlayerControls) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ResolutionType : Swift.Float {
    case autoResolution
    case maxResolution
    case averageAboveResolution
    case averageBelowResolution
    case minResolution
    public init?(rawValue: Swift.Float)
    public typealias RawValue = Swift.Float
    public var rawValue: Swift.Float {
      get
    }
  }
  @objc override dynamic public init()
  open func setSource(vlToken: Swift.String, vlAPIEndPoint: Swift.String, vlBeaconEndPoint: Swift.String? = nil, videoID: Swift.String, vlPlayerTag: Swift.String, customControlsView: UIKit.UIView?, adUrl: Swift.String?, playerProgressInterval: Swift.Int? = nil, images: (leftImage: UIKit.UIImage, rightImage: UIKit.UIImage?)? = nil, playerFeaturesSupported: VLPlayerLib.VLPlayer.VLPlayerFeatureSupported!, nextVideoList: [Swift.String] = [], householdID: Swift.String? = nil, tveProvider: Swift.String?, location: (lat: Swift.String, long: Swift.String)?, epgProgramDetails: VLPlayerLib.VLEPGProgramDetails? = nil, isSuccess: @escaping ((_ isSuccess: Swift.Bool, _ playerView: UIKit.UIView?, _ contentResponse: Swift.Dictionary<Swift.String, Swift.AnyObject>?) -> Swift.Void))
  @objc deinit
}
extension VLPlayerLib.VLPlayer {
  public struct VLPlayerFeatureSupported {
    public init(fullScreenOnly: Swift.Bool, isCustomLoaderAdded: Swift.Bool = false, shouldStartPictureInPictureInline: Swift.Bool = false, autoPlayEnabled: Swift.Bool = true, loopVideoPlayback: Swift.Bool = false, hideVideoControls: Swift.Bool = false, mutePlayback: Swift.Bool = false, customPlayerControlsColor: VLPlayerLib.PlayerControlsColor?, clientSideAdTrackingDetails: VLPlayerLib.VLPlayer.VLClientSideAdTrackingDetails? = nil, showPlayerControlAlways: Swift.Bool = false, supportsChromeCast: Swift.Bool = false, chromecastCustomReceiver: Swift.String?, playerResponseRequired: Swift.Bool = false, preGameStartTime: Swift.Double?, appMacrosList: [Swift.String : Swift.String]? = [:], vlBeacon: VLBeaconLib.VLBeacon?, playAudioOnly: Swift.Bool? = false, epgSupportModel: VLPlayerLib.EPGSupportModel? = nil)
  }
  public struct VLClientSideAdTrackingDetails {
    public init(isClientSideAdTrackingEnabled: Swift.Bool, isWTAEnabled: Swift.Bool)
  }
}
extension VLPlayerLib.VLPlayer {
  public enum VideoPlayerGravity : Swift.String {
    case resizeAspect
    case resizeAspectFill
    case resize
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum VLPlayerState : Swift.String {
    case paused
    case playing
    case playingAndCasting
    case buffering
    case complete
    case error
    case advertisement
    case stalled
    case stopped
    case none
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum AdsEventType : Swift.String {
    case impression
    case start
    case firstQuartile
    case midPoint
    case thirdQuartile
    case complete
    case mute
    case exitFullscreen
    case fullscreen
    case unmute
    case resume
    case closeLinear
    case error
    case pause
    case acceptInvitationLinear
    case rewind
    case creativeView
    case stop
    case clickThrough
    case clickTracking
    case none
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public struct PlayerControlsColor {
  public init(iconColor: Swift.String? = nil, textColor: Swift.String? = nil, progressBarBGColor: Swift.String? = nil, progressBarColor: Swift.String? = nil)
}
public struct EntitlementData {
  public let playerObject: VLPlayerLib.PlayerObject?
  public let isSuccess: Swift.Bool?
  public let error: VLPlayerLib.VLError?
  public let playerResponse: VLPlayerLib.VLPlayerResponse?
  public let contentResponse: Swift.Dictionary<Swift.String, Swift.AnyObject>?
  public init(playerObject: VLPlayerLib.PlayerObject?, isSuccess: Swift.Bool?, error: VLPlayerLib.VLError?, playerResponse: VLPlayerLib.VLPlayerResponse?, contentResponse: Swift.Dictionary<Swift.String, Swift.AnyObject>?)
}
public class EPGSupportModel {
  public init(isEpg: Swift.Bool = false, epgFrame: CoreFoundation.CGRect = UIScreen.main.bounds)
  @objc deinit
}
extension VLPlayerLib.NetworkConnectionStatus : Swift.Equatable {}
extension VLPlayerLib.NetworkConnectionStatus : Swift.Hashable {}
extension VLPlayerLib.NetworkConnectionStatus : Swift.RawRepresentable {}
extension VLPlayerLib.NetworkBandwidthUnit : Swift.Equatable {}
extension VLPlayerLib.NetworkBandwidthUnit : Swift.Hashable {}
extension VLPlayerLib.NetworkBandwidthUnit : Swift.RawRepresentable {}
extension VLPlayerLib.VideoSourceType : Swift.Equatable {}
extension VLPlayerLib.VideoSourceType : Swift.Hashable {}
extension VLPlayerLib.VLPlayer.LeaderboardPlayerControls : Swift.Equatable {}
extension VLPlayerLib.VLPlayer.LeaderboardPlayerControls : Swift.Hashable {}
extension VLPlayerLib.VLPlayer.ResolutionType : Swift.Equatable {}
extension VLPlayerLib.VLPlayer.ResolutionType : Swift.Hashable {}
extension VLPlayerLib.VLPlayer.ResolutionType : Swift.RawRepresentable {}
extension VLPlayerLib.VLPlayer.VideoPlayerGravity : Swift.Equatable {}
extension VLPlayerLib.VLPlayer.VideoPlayerGravity : Swift.Hashable {}
extension VLPlayerLib.VLPlayer.VideoPlayerGravity : Swift.RawRepresentable {}
extension VLPlayerLib.VLPlayer.VLPlayerState : Swift.Equatable {}
extension VLPlayerLib.VLPlayer.VLPlayerState : Swift.Hashable {}
extension VLPlayerLib.VLPlayer.VLPlayerState : Swift.RawRepresentable {}
extension VLPlayerLib.VLPlayer.AdsEventType : Swift.Equatable {}
extension VLPlayerLib.VLPlayer.AdsEventType : Swift.Hashable {}
extension VLPlayerLib.VLPlayer.AdsEventType : Swift.RawRepresentable {}
